{"ast":null,"code":"import { USER_LOGIN_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS } from \"../constants/userConstants\";\nimport axios from \"axios\";\nimport { ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS } from \"../constants/orderConstants\";\nimport { CART_CLEAR_ITEMS } from \"../constants/cartConstants\";\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders/add/`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: CART_CLEAR_ITEMS,\n      payload: data\n    });\n    localStorage.removeItem('cartItems');\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const orderDetails = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders/add/`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: CART_CLEAR_ITEMS,\n      payload: data\n    });\n    localStorage.removeItem('cartItems');\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Amir/Documents/AmirShop2/frontend/src/actions/orderActions.js"],"names":["USER_LOGIN_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","axios","ORDER_CREATE_FAIL","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","CART_CLEAR_ITEMS","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","token","data","post","payload","localStorage","removeItem","error","response","detail","message","orderDetails"],"mappings":"AAAA,SACIA,kBADJ,EAEIC,wBAFJ,EAGIC,2BAHJ,EAIIC,2BAJJ,QAKO,4BALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,EAA2BC,oBAA3B,EAAiDC,oBAAjD,QAA4E,6BAA5E;AACA,SAAQC,gBAAR,QAA+B,4BAA/B;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW,OAAOC,QAAP,EAAgBC,QAAhB,KAA2B;AAC7D,MAAG;AACCD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACP;AADA,KAAD,CAAR;AAGA,UAAM;AACFQ,MAAAA,SAAS,EAAC;AAACC,QAAAA;AAAD;AADR,QAEFH,QAAQ,EAFZ;AAGA,UAAMI,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAe,kBADV;AAEL,yBAAmB,UAASF,QAAQ,CAACG,KAAM;AAFtC;AADE,KAAf;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,KAAK,CAACgB,IAAN,CAAY,kBAAZ,EAA8BV,KAA9B,EAAoCM,MAApC,CAArB;AACAL,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAACN,oBAAN;AAA2Bc,MAAAA,OAAO,EAACF;AAAnC,KAAD,CAAR;AACAR,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAACL,gBAAN;AAAuBa,MAAAA,OAAO,EAACF;AAA/B,KAAD,CAAR;AACAG,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AAGH,GAnBD,CAoBA,OAAOC,KAAP,EAAa;AACTb,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACR,iBADA;AACkBgB,MAAAA,OAAO,EAACG,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBO,MAAtC,GAA8CF,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBO,MAAlE,GAAyEF,KAAK,CAACG;AADzG,KAAD,CAAR;AAGH;AACJ,CA1BM;AA2BP,OAAO,MAAMC,YAAY,GAAIlB,KAAD,IAAW,OAAOC,QAAP,EAAgBC,QAAhB,KAA2B;AAC9D,MAAG;AACCD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACP;AADA,KAAD,CAAR;AAGA,UAAM;AACFQ,MAAAA,SAAS,EAAC;AAACC,QAAAA;AAAD;AADR,QAEFH,QAAQ,EAFZ;AAGA,UAAMI,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAe,kBADV;AAEL,yBAAmB,UAASF,QAAQ,CAACG,KAAM;AAFtC;AADE,KAAf;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,KAAK,CAACgB,IAAN,CAAY,kBAAZ,EAA8BV,KAA9B,EAAoCM,MAApC,CAArB;AACAL,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAACN,oBAAN;AAA2Bc,MAAAA,OAAO,EAACF;AAAnC,KAAD,CAAR;AACAR,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAACL,gBAAN;AAAuBa,MAAAA,OAAO,EAACF;AAA/B,KAAD,CAAR;AACAG,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AAGH,GAnBD,CAoBA,OAAOC,KAAP,EAAa;AACTb,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACR,iBADA;AACkBgB,MAAAA,OAAO,EAACG,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBO,MAAtC,GAA8CF,KAAK,CAACC,QAAN,CAAeN,IAAf,CAAoBO,MAAlE,GAAyEF,KAAK,CAACG;AADzG,KAAD,CAAR;AAGH;AACJ,CA1BM","sourcesContent":["import {\r\n    USER_LOGIN_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS\r\n} from \"../constants/userConstants\";\r\nimport axios from \"axios\";\r\nimport {ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS} from \"../constants/orderConstants\";\r\nimport {CART_CLEAR_ITEMS} from \"../constants/cartConstants\";\r\n\r\nexport const createOrder = (order) => async (dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:ORDER_CREATE_REQUEST\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers :{\r\n                'Content-type':'application/json',\r\n                'Authorization' : `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.post(`/api/orders/add/`,order,config)\r\n        dispatch({type:ORDER_CREATE_SUCCESS,payload:data})\r\n        dispatch({type:CART_CLEAR_ITEMS,payload:data})\r\n        localStorage.removeItem('cartItems')\r\n\r\n\r\n    }\r\n    catch (error){\r\n        dispatch({\r\n            type:ORDER_CREATE_FAIL,payload:error.response && error.response.data.detail? error.response.data.detail:error.message,\r\n        })\r\n    }\r\n}\r\nexport const orderDetails = (order) => async (dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:ORDER_CREATE_REQUEST\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers :{\r\n                'Content-type':'application/json',\r\n                'Authorization' : `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.post(`/api/orders/add/`,order,config)\r\n        dispatch({type:ORDER_CREATE_SUCCESS,payload:data})\r\n        dispatch({type:CART_CLEAR_ITEMS,payload:data})\r\n        localStorage.removeItem('cartItems')\r\n\r\n\r\n    }\r\n    catch (error){\r\n        dispatch({\r\n            type:ORDER_CREATE_FAIL,payload:error.response && error.response.data.detail? error.response.data.detail:error.message,\r\n        })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}